-- =====================================================================================================================

CREATE TABLE IF NOT EXISTS users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(250) NOT NULL,
  email VARCHAR(254) NOT NULL UNIQUE
);

ALTER TABLE users DROP CONSTRAINT IF EXISTS users_name_check;
ALTER TABLE users DROP CONSTRAINT IF EXISTS users_email_check;

ALTER TABLE users ADD CONSTRAINT users_name_check CHECK (TRIM(name) <> '' AND LENGTH(TRIM(name)) >= 2);
ALTER TABLE users ADD CONSTRAINT users_email_check CHECK (TRIM(email) <> '' AND LENGTH(TRIM(email)) >= 6 AND TRIM(email) LIKE '%_@_%._%');

COMMENT ON TABLE users IS 'Содержит информацию о пользователях';
COMMENT ON COLUMN users.id IS 'Уникальный идентификатор пользователя';
COMMENT ON COLUMN users.name IS 'Имя пользователя';
COMMENT ON COLUMN users.email IS 'Адрес электронной почты пользователя';

-- =====================================================================================================================

CREATE TABLE IF NOT EXISTS categories (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(50) NOT NULL UNIQUE
);

ALTER TABLE categories DROP CONSTRAINT IF EXISTS categories_name_check;
ALTER TABLE categories ADD CONSTRAINT categories_name_check CHECK (TRIM(name) <> '' AND LENGTH(TRIM(name)) >= 2);

COMMENT ON TABLE categories IS 'Содержит информацию о категориях';
COMMENT ON COLUMN categories.id IS 'Уникальный идентификатор категории';
COMMENT ON COLUMN categories.name IS 'Название категории';

-- =====================================================================================================================

CREATE TABLE IF NOT EXISTS events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_on TIMESTAMP NOT NULL,
  initiator_id BIGINT NOT NULL REFERENCES users (id) ON DELETE CASCADE,
  title VARCHAR(120) NOT NULL,
  annotation VARCHAR(2000) NOT NULL,
  description VARCHAR(7000) NOT NULL,
  event_date TIMESTAMP NOT NULL,
  category_id BIGINT NOT NULL REFERENCES categories (id) ON DELETE RESTRICT,
  location VARCHAR(50) NOT NULL,
  published_on TIMESTAMP,
  paid BOOLEAN NOT NULL DEFAULT FALSE,
  participant_limit INTEGER NOT NULL DEFAULT 0,
  request_moderation BOOLEAN NOT NULL DEFAULT TRUE,
  confirmed_requests INTEGER NOT NULL DEFAULT 0,
  state VARCHAR(10) NOT NULL,
  views INTEGER NOT NULL DEFAULT 0
);

ALTER TABLE events DROP CONSTRAINT IF EXISTS events_title_check;
ALTER TABLE events DROP CONSTRAINT IF EXISTS events_annotation_check;
ALTER TABLE events DROP CONSTRAINT IF EXISTS events_description_check;
ALTER TABLE events DROP CONSTRAINT IF EXISTS events_state_check;

ALTER TABLE events ADD CONSTRAINT events_title_check CHECK (TRIM(title) <> '' AND LENGTH(TRIM(title)) >= 3);
ALTER TABLE events ADD CONSTRAINT events_annotation_check CHECK (TRIM(annotation) <> '' AND LENGTH(TRIM(annotation)) >= 20);
ALTER TABLE events ADD CONSTRAINT events_description_check CHECK (TRIM(description) <> '' AND LENGTH(TRIM(description)) >= 20);
ALTER TABLE events ADD CONSTRAINT events_state_check CHECK (state IN ('PENDING', 'PUBLISHED', 'REJECTED', 'CANCELED'));

COMMENT ON TABLE events IS 'Содержит информацию о событиях';
COMMENT ON COLUMN events.id IS 'Уникальный идентификатор события';
COMMENT ON COLUMN events.created_on IS 'Дата и время создания события';
COMMENT ON COLUMN events.initiator_id IS 'Идентификатор инициатора события';
COMMENT ON COLUMN events.title IS 'Заголовок события';
COMMENT ON COLUMN events.annotation IS 'Краткое описание события';
COMMENT ON COLUMN events.description IS 'Полное описание события';
COMMENT ON COLUMN events.event_date IS 'Дата и время на которые намечено событие';
COMMENT ON COLUMN events.category_id IS 'Идентификатор категории, к которой относится событие';
COMMENT ON COLUMN events.location IS 'Широта и долгота места проведения события';
COMMENT ON COLUMN events.published_on IS 'Дата и время публикации события';
COMMENT ON COLUMN events.paid IS 'Признак, нужно ли оплачивать событие';
COMMENT ON COLUMN events.participant_limit IS 'Ограничение на количество участников';
COMMENT ON COLUMN events.request_moderation IS 'Признак, нужна ли пре-модерация заявок на участие';
COMMENT ON COLUMN events.confirmed_requests IS 'Количество одобренных заявок на участие в данном событии';
COMMENT ON COLUMN events.state IS 'Состояние события';
COMMENT ON COLUMN events.views IS 'Количество просмотров события';

-- =====================================================================================================================

CREATE TABLE IF NOT EXISTS compilations (
 id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 title VARCHAR(255) NOT NULL,
 pinned BOOLEAN NOT NULL DEFAULT FALSE
);

COMMENT ON TABLE compilations IS 'Содержит информацию о подборках';
COMMENT ON COLUMN compilations.id IS 'Уникальный идентификатор подборки';
COMMENT ON COLUMN compilations.title IS 'Наименование подборки';
COMMENT ON COLUMN compilations.pinned IS 'Признак, закрепленности подборки';

-- =====================================================================================================================

CREATE TABLE IF NOT EXISTS compilation_events (
 compilation_id BIGINT REFERENCES compilations(id) ON DELETE CASCADE,
 event_id BIGINT REFERENCES events(id) ON DELETE CASCADE,
 PRIMARY KEY (compilation_id, event_id)
);

COMMENT ON TABLE compilation_events IS 'Связывает подборки с событиями (many-to-many)';
COMMENT ON COLUMN compilation_events.compilation_id IS 'Идентификатор подборки';
COMMENT ON COLUMN compilation_events.event_id IS 'Идентификатор события';

-- =====================================================================================================================

CREATE TABLE IF NOT EXISTS participation_requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created TIMESTAMP WITHOUT TIME ZONE NOT NULL,
  event_id BIGINT NOT NULL REFERENCES events (id) ON DELETE CASCADE,
  requester_id BIGINT NOT NULL REFERENCES users (id) ON DELETE CASCADE,
  status VARCHAR(10) NOT NULL,
  CONSTRAINT ux_event_requester UNIQUE (event_id, requester_id)
);

ALTER TABLE participation_requests DROP CONSTRAINT IF EXISTS participation_requests_state_check;
ALTER TABLE participation_requests ADD CONSTRAINT participation_requests_state_check CHECK (status IN ('PENDING', 'CONFIRMED', 'CANCELED', 'REJECTED'));

COMMENT ON TABLE participation_requests IS 'Содержит информацию о событиях';
COMMENT ON COLUMN participation_requests.id IS 'Уникальный идентификатор заявки на участие в событии';
COMMENT ON COLUMN participation_requests.created IS 'Дата и время создания заявки на участие в событии';
COMMENT ON COLUMN participation_requests.event_id IS 'Идентификатор события';
COMMENT ON COLUMN participation_requests.requester_id IS 'Идентификатор пользователя, отправившего заявку';
COMMENT ON COLUMN participation_requests.status IS 'Статус заявки на участие в событии';

-- =====================================================================================================================

CREATE TABLE IF NOT EXISTS comments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL REFERENCES users (id) ON DELETE CASCADE,
  event_id BIGINT NOT NULL REFERENCES events (id) ON DELETE CASCADE,
  text VARCHAR(4000) NOT NULL,
  created TIMESTAMP WITHOUT TIME ZONE NOT NULL,
  updated TIMESTAMP WITHOUT TIME ZONE
);

COMMENT ON TABLE comments IS 'Содержит информацию о комментариях';
COMMENT ON COLUMN comments.id IS 'Уникальный идентификатор комментария';
COMMENT ON COLUMN comments.user_id IS 'Идентификатор пользователя, оставившего комментарий';
COMMENT ON COLUMN comments.event_id IS 'Идентификатор события';
COMMENT ON COLUMN comments.text IS 'Текст комментария';
COMMENT ON COLUMN comments.created IS 'Дата и время создания комментария';
COMMENT ON COLUMN comments.updated IS 'Дата и время изменения комментария';